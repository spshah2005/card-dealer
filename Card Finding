#include <stdio.h>
#include <stdlib.h>
typedef struct{
  int card1, card2, card3;
  int winning_num; // 0-12 high card, 13-25 pair, 26-38 straight, 39-51 three of a kind, 52-64 flush, 64-76 straight flush
} CardSet;

int get_card_rank(int card){
    return card % 13;
}

char* get_card_suit(int x){
    if(x < 13){
        return "Spades";
    }else if(x < 26){
        return "Clubs";
    }else if(x < 39){
        return "Diamonds";
    }
    return "Hearts";
}

const char* print_card(int card){
    char* card_str = malloc(20);  // Allocate memory for the string
    if (!card_str) return NULL;   // Check for allocation failure

    int card_rank = card % 13;    // Rank of the card
    const char* suit;             // Suit of the card

    // Assign suit based on range
    if (card <= 13) {
        suit = "Spades";
    } else if (card <= 26) {
        suit = "Clubs";
    } else if (card <= 39) {
        suit = "Diamonds";
    } else {
        suit = "Hearts";
    }

    // Assign card rank name
    if (card_rank == 0) {
        sprintf(card_str, "Ace of %s", suit);
    } else if (card_rank == 10) {
        sprintf(card_str, "Jack of %s", suit);
    } else if (card_rank == 11) {
        sprintf(card_str, "Queen of %s", suit);
    } else if (card_rank == 12) {
        sprintf(card_str, "King of %s", suit);
    } else {
        sprintf(card_str, "%d of %s", card_rank + 1, suit);
    }

    return card_str; // Return dynamically allocated string
}

int straight_flush_check(int card1, int card2, int card3){
    int flush = 0;
    int straight = 0;
    if(get_card_suit(card1) == get_card_suit(card2) && get_card_suit(card1) == get_card_suit(card3)){
        flush = 1;
    }
    //checking for straight
    if(card1 + 1 == card2 && card2 + 1 == card3){
        straight = 1;
    }
    if(flush == 1 && straight == 1){
        return 64 + (card1 % 13);
    } else if(flush == 1){
        return 52 + (card1 % 13);
    } else if(straight == 1){
        return 39 + (card1 % 13);
    }
    return 0;
}

int three_of_a_kind_check(int card1, int card2, int card3){
    if(card1 % 13 == card2 % 13 && card1 % 13 == card3 % 13){
        return 39 + (card1 % 13);
    }
    return 0;
}

int pair_check(int card1, int card2, int card3){
    if(card1 % 13 == card2 % 13){
      return 13 + (card1 % 13);
    }
    else if(card1 % 13 == card3 % 13){
        return 13 + (card1 % 13);
    }
    else if(card2 % 13 == card3 % 13){
        return 13 + (card2 % 13);
    }
    return card1 % 13; // this is the highest rank card
}

int main() {
    // 3-card poker
    int x;
    int num_player;
    char *suit;
    printf("How many players? ");
    scanf("%d", &num_player);
    CardSet cards[num_player + 1];
    for(int round = 0; round < 3; ++round){  // First deal card1, then card2, then card3
        printf("Card number %d for everyone\n", round + 1);
        for(int player = 0; player < num_player + 1; ++player){
            printf("what card dose player %d get: ", player + 1);
            scanf("%d", &x);
            //printf("\n");
            if(round == 0){
                cards[player].card1 = x;
            }else if(round == 1){
                cards[player].card2 = x;
            }else{
                cards[player].card3 = x;
            }
        }
    }
    //sorting each players hand
    for(int i = 0; i < num_player + 1; ++i){
        int temp;
        if(cards[i].card1 % 13 > cards[i].card2 % 13){  // Swap if needed
            temp = cards[i].card1;
            cards[i].card1 = cards[i].card2;
            cards[i].card2 = temp;
        }
        if(cards[i].card2 % 13 > cards[i].card3 % 13){  // Swap if needed
            temp = cards[i].card2;
            cards[i].card2 = cards[i].card3;
            cards[i].card3 = temp;
        }
        if(cards[i].card1 % 13> cards[i].card2 % 13){  // Final check
            temp = cards[i].card1;
            cards[i].card1 = cards[i].card2;
            cards[i].card2 = temp;
        }
    }
    // figuering out what each player has
    for(int players = 0; players < num_player + 1; ++players){
        //checking for straight flush
        cards[players].winning_num = straight_flush_check(cards[players].card1,
                                     cards[players].card2, cards[players].card3);
        if(cards[players].winning_num >= 52){ // player has a straight_flush or a flush
            continue; // nothing will be better then this
        }
        
        cards[players].winning_num = three_of_a_kind_check(cards[players].card1,
                                     cards[players].card2, cards[players].card3);
        if(cards[players].winning_num >= 26){
            continue; // nothing will be better then this
        }       
        //checking for pair
        cards[players].winning_num = pair_check(cards[players].card1,
                                     cards[players].card2, cards[players].card3); // returns high card if no pair
        // at this point its one pair or high card for winning hand

    } // end of for loop for checking winning
    
    // Find the player with the highest winning hand
    int winning_hand = cards[0].winning_num;
    int player_num = 0;

    for(int i = 0; i < num_player + 1; ++i){  // seeing who won
        if(cards[i].winning_num > winning_hand){
            winning_hand = cards[i].winning_num;
            player_num = i;
        }
    }

    // start of printing winner
    char* hand_name;
    if(winning_hand >= 64){
        hand_name = "Straight Flush";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }else if(winning_hand >= 52){
        hand_name = "Flush";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }else if(winning_hand >= 39){
        hand_name = "Three of A Kind";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }else if(winning_hand >= 26){
        hand_name = "Straight";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }else if(winning_hand >= 13){
        hand_name = "One Pair";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }else{
        hand_name = "High Card";
        printf("\nPlayer %d won with a %s, %s, %s, %s\n",
        player_num + 1,  // Convert index to 1-based player number
        hand_name,
        print_card(cards[player_num].card1), 
        print_card(cards[player_num].card2), 
        print_card(cards[player_num].card3));
    }

    return 0;
} // end of main
