/*
 * rfid.h
 *
 *  Created on: Apr 17, 2025
 *      Author: quincamp
 */

#ifndef INC_RFID_H_
#define INC_RFID_H_

typedef enum MFRC522_Register {
  // Page 0:
  CommandReg    = 0x01 << 1,
  ComIEnReg     = 0x02 << 1,
  DivIEnReg     = 0x03 << 1,
  ComIrqReg     = 0x04 << 1,
  DivIrqReg     = 0x05 << 1,
  ErrorReg      = 0x06 << 1,
  Status1Reg    = 0x07 << 1,
  Status2Reg    = 0x08 << 1,
  FIFODataReg   = 0x09 << 1,
  FIFOLevelReg  = 0x0A << 1,
  ControlReg    = 0x0C << 1,
  BitFramingReg = 0x0D << 1,
  CollReg				= 0x0E << 1,
  // Page 1:
  ModeReg				= 0x11 << 1,
  TxModeReg     = 0x12 << 1,
  RxModeReg     = 0x13 << 1,
  TxControlReg  = 0x14 << 1,
  TxASKReg			= 0x15 << 1,
  // Page 2:
  ModWidthReg   = 0x24 << 1,
  TModeReg			= 0x2A << 1,
  TPrescalerReg = 0x2B << 1,
  TReloadRegH		= 0x2C << 1,
  TReloadRegL 	= 0x2D << 1,
  // Page 3:
  AutoTestReg   = 0x36 << 1,
  VersionReg    = 0x37 << 1
} MFRC522_Register; // MFRC522_Register{}

// Commands on the MFRC522 (written to CommandReg)
typedef enum MFRC522_Command  {
  Idle             = 0x00, // No action, cancels current command action
  Mem              = 0x01, // stores 25 bytes into the internal buffer
  GenerateRandomID = 0x02, // Generates a 10-byte random ID number
  CalcCRC          = 0x03, // activates the CRC coprocessor or performs a self-test
  Transmit         = 0x04, // Transmits data from the FIFO buffer
  NoCMDChange      = 0x07, // No command change
  Receive          = 0x08, // Receives data into the FIFO buffer
  Transceive       = 0x0C, // Allows it to act as a receiver and transmitter
  MFAuthent        = 0x0E, // Performs the MIFARE standard authentication as a reader
  SoftReset        = 0x0F  // Resets the peripheral
} MFRC522_Command; // MFRC522_Command{}

// Commands sent to the PICC (card)
typedef enum PICC_Command {
	PICC_CMD_REQA    = 0x26, // REQuest (Type A card)
  PICC_CMD_WUPA    = 0x52, // WakeUP  (Type A card)
 	PICC_CMD_CT      = 0x88, // Cascade Tag
	PICC_CMD_SEL_CL1 = 0x93, // Used in anti-collision
	PICC_CMD_SEL_CL2 = 0x95, // "
	PICC_CMD_SEL_CL3 = 0x97, // "
	PICC_CMD_HALTA   = 0x50  // Puts PICC in HALT mode
} PICC_Command;

// Return codes from functions
typedef enum MFRC522_Status {
	STATUS_OK,
	STATUS_ERROR,
	STATUS_COLLISION,
	STATUS_TIMEOUT,
	STATUS_NO_ROOM,
	STATUS_INTERNAL_ERROR,
	STATUS_INVALID,
	STATUS_CRC_WRONG
} MFRC522_Status;

const uint8_t card_uids[104][2] = {
{ 0x9C, 0xAB },
{ 0x2E, 0xAB },
{ 0xD4, 0xA1 },
{ 0x7E, 0xA1 },
{ 0x34, 0x98 },
{ 0xCE, 0x97 },
{ 0xD5, 0x8F },
{ 0x7C, 0x8F },
{ 0x61, 0x86 },
{ 0x16, 0x86 },
{ 0x34, 0x7D },
{ 0xF2, 0x7C },
{ 0x47, 0x74 },
{ 0xD6, 0x73 },
{ 0xBA, 0x6B },
{ 0x6D, 0x6B },
{ 0x4E, 0x86 },
{ 0x9C, 0x86 },
{ 0x85, 0x74 },
{ 0x10, 0x74 },
{ 0xBA, 0xA1 },
{ 0x14, 0xAB },
{ 0x1C, 0x98 },
{ 0x51, 0xA1 },
{ 0xA8, 0x8F },
{ 0xB7, 0x97 },
{ 0x12, 0x1B },
{ 0x1E, 0x23 },
{ 0x68, 0x23 },
{ 0x44, 0x1B },
{ 0x76, 0x23 },
{ 0x8F, 0x23 },
{ 0x17, 0x8E },
{ 0x48, 0x97 },
{ 0xB3, 0x97 },
{ 0x8, 0xA1 },
{ 0x63, 0xA1 },
{ 0xAB, 0xAA },
{ 0x5E, 0x85 },
{ 0xBB, 0x8D },
{ 0x85, 0xB5 },
{ 0x2E, 0xBE },
{ 0x77, 0xAB },
{ 0xD2, 0xB4 },
{ 0xAB, 0xA1 },
{ 0xFD, 0xAA },
{ 0xA, 0xA1 },
{ 0xD5, 0xA1 },
{ 0x7D, 0x97 },
{ 0xCD, 0x97 },
{ 0x2E, 0x8D },
{ 0x18, 0x8E },
{ 0x81, 0xAB },
{ 0xE9, 0xB4 },
{ 0x60, 0xB5 },
{ 0xBE, 0xBE },
{ 0x2F, 0xBF },
{ 0xA0, 0xC8 },
{ 0x84, 0xC8 },
{ 0x15, 0xBF },
{ 0xA1, 0xBE },
{ 0x44, 0xB5 },
{ 0xCE, 0xB4 },
{ 0x67, 0xAB },
{ 0xFA, 0xAA },
{ 0xA2, 0xA1 },
{ 0x37, 0xA1 },
{ 0x4, 0x98 },
{ 0xF7, 0x8 },
{ 0x6A, 0x1 },
{ 0xE4, 0x11 },
{ 0x2C, 0x9 },
{ 0xAD, 0xF7 },
{ 0x86, 0xEE },
{ 0x9F, 0x1A },
{ 0x35, 0x12 },
{ 0x16, 0x1 },
{ 0x31, 0xF8 },
{ 0xA3, 0x85 },
{ 0x6A, 0x8D },
{ 0x69, 0x8D },
{ 0x2F, 0x8D },
{ 0x87, 0x8E },
{ 0x82, 0x97 },
{ 0x36, 0xAA },
{ 0xF4, 0xA1 },
{ 0x8F, 0xA0 },
{ 0x49, 0x98 },
{ 0x7C, 0xB4 },
{ 0x95, 0xAB },
{ 0x5F, 0xBD },
{ 0x2E, 0xB5 },
{ 0x9B, 0xBD },
{ 0x6C, 0xB5 },
{ 0x2F, 0xB5 },
{ 0x60, 0xBD },
{ 0xF0, 0xAB },
{ 0xE1, 0xB3 },
{ 0xD7, 0xA1 },
{ 0x18, 0xAA },
{ 0x2C, 0x98 },
{ 0x73, 0xA0 },
{ 0x88, 0x8E },
{ 0xD9, 0x96 }
};

// Correct response from MFRC522 to self test ( see MFRC522_performSelfTest() )
const uint8_t correct_self_test[64] = {
	0x00, 0xEB, 0x66, 0xBA, 0x57, 0xBF, 0x23, 0x95,
	0xD0, 0xE3, 0x0D, 0x3D, 0x27, 0x89, 0x5C, 0xDE,
	0x9D, 0x3B, 0xA7, 0x00, 0x21, 0x5B, 0x89, 0x82,
	0x51, 0x3A, 0xEB, 0x02, 0x0C, 0xA5, 0x00, 0x49,
	0x7C, 0x84, 0x4D, 0xB3, 0xCC, 0xD2, 0x1B, 0x81,
	0x5D, 0x48, 0x76, 0xD5, 0x71, 0x61, 0x21, 0xA9,
	0x86, 0x96, 0x83, 0x38, 0xCF, 0x9D, 0x5B, 0x6D,
	0xDC, 0x15, 0xBA, 0x3E, 0x7D, 0x95, 0x3B, 0x2F
};

#endif /* INC_RFID_H_ */
