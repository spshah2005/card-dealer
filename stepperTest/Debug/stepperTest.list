
stepperTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029d4  080029d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d4  080029d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  080029dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2004000c  080029e8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040078  080029e8  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fe1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001740  00000000  00000000  0000e01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0000f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  000102b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028803  00000000  00000000  00010b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be87  00000000  00000000  0003936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd21b  00000000  00000000  000451f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014240f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef4  00000000  00000000  00142454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00145348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800297c 	.word	0x0800297c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	0800297c 	.word	0x0800297c

080001fc <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define stepsPerRev 200

void delay(uint16_t us) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <delay+0x30>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2200      	movs	r2, #0
 800020c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);
 800020e:	bf00      	nop
 8000210:	4b06      	ldr	r3, [pc, #24]	@ (800022c <delay+0x30>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	429a      	cmp	r2, r3
 800021a:	d3f9      	bcc.n	8000210 <delay+0x14>
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20040028 	.word	0x20040028

08000230 <rpm2Delay>:

void rpm2Delay(uint32_t rpm) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint16_t us = (60000000 / (stepsPerRev*16)) / rpm;
 8000238:	f644 123e 	movw	r2, #18750	@ 0x493e
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000242:	81fb      	strh	r3, [r7, #14]
	delay(us);
 8000244:	89fb      	ldrh	r3, [r7, #14]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffd8 	bl	80001fc <delay>
}
 800024c:	bf00      	nop
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <offsetAngle>:

void offsetAngle(float angle, uint8_t dir, uint32_t rpm) { // dir (direction), 0 = counter-clockwise, 1 = clockwise
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
 800025a:	ed87 0a03 	vstr	s0, [r7, #12]
 800025e:	4603      	mov	r3, r0
 8000260:	6079      	str	r1, [r7, #4]
 8000262:	72fb      	strb	r3, [r7, #11]
	float anglePerUpdate = 0.1125;	// Assuming an update is a 16th microstep
 8000264:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <offsetAngle+0x80>)
 8000266:	61bb      	str	r3, [r7, #24]
	uint32_t updates = angle/anglePerUpdate;
 8000268:	edd7 6a03 	vldr	s13, [r7, #12]
 800026c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000278:	ee17 3a90 	vmov	r3, s15
 800027c:	617b      	str	r3, [r7, #20]
	if (dir) {	// clockwise
 800027e:	7afb      	ldrb	r3, [r7, #11]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d005      	beq.n	8000290 <offsetAngle+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000284:	2201      	movs	r2, #1
 8000286:	2102      	movs	r1, #2
 8000288:	4813      	ldr	r0, [pc, #76]	@ (80002d8 <offsetAngle+0x84>)
 800028a:	f000 ffa9 	bl	80011e0 <HAL_GPIO_WritePin>
 800028e:	e004      	b.n	800029a <offsetAngle+0x46>
	}
	else {	// counter-clockwise
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	2102      	movs	r1, #2
 8000294:	4810      	ldr	r0, [pc, #64]	@ (80002d8 <offsetAngle+0x84>)
 8000296:	f000 ffa3 	bl	80011e0 <HAL_GPIO_WritePin>
	}
	for (uint32_t i = 0; i < updates; ++i) {
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
 800029e:	e00f      	b.n	80002c0 <offsetAngle+0x6c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2110      	movs	r1, #16
 80002a4:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <offsetAngle+0x84>)
 80002a6:	f000 ff9b 	bl	80011e0 <HAL_GPIO_WritePin>
		rpm2Delay(rpm);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f7ff ffc0 	bl	8000230 <rpm2Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2110      	movs	r1, #16
 80002b4:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <offsetAngle+0x84>)
 80002b6:	f000 ff93 	bl	80011e0 <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < updates; ++i) {
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	3301      	adds	r3, #1
 80002be:	61fb      	str	r3, [r7, #28]
 80002c0:	69fa      	ldr	r2, [r7, #28]
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d3eb      	bcc.n	80002a0 <offsetAngle+0x4c>
	}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3720      	adds	r7, #32
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	3de66666 	.word	0x3de66666
 80002d8:	48000800 	.word	0x48000800

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fc6c 	bl	8000bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f867 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f8f9 	bl	80004e0 <MX_GPIO_Init>
  MX_TIM4_Init();
 80002ee:	f000 f8a9 	bl	8000444 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80002f2:	2104      	movs	r1, #4
 80002f4:	482b      	ldr	r0, [pc, #172]	@ (80003a4 <main+0xc8>)
 80002f6:	f001 ff57 	bl	80021a8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 4);
 80002fa:	4b2a      	ldr	r3, [pc, #168]	@ (80003a4 <main+0xc8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2204      	movs	r2, #4
 8000300:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	2108      	movs	r1, #8
 8000306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030a:	f000 ff69 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	4825      	ldr	r0, [pc, #148]	@ (80003a8 <main+0xcc>)
 8000314:	f000 ff64 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4822      	ldr	r0, [pc, #136]	@ (80003a8 <main+0xcc>)
 800031e:	f000 ff5f 	bl	80011e0 <HAL_GPIO_WritePin>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  HAL_Delay(10000);
 8000322:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000326:	f000 fcbf 	bl	8000ca8 <HAL_Delay>
	  for (int i = 0; i < 16; ++i) {
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e00d      	b.n	800034c <main+0x70>
		  offsetAngle(22.5, 0, 500);
 8000330:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000334:	2000      	movs	r0, #0
 8000336:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80003ac <main+0xd0>
 800033a:	f7ff ff8b 	bl	8000254 <offsetAngle>
		  HAL_Delay(500);
 800033e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000342:	f000 fcb1 	bl	8000ca8 <HAL_Delay>
	  for (int i = 0; i < 16; ++i) {
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	2b0f      	cmp	r3, #15
 8000350:	ddee      	ble.n	8000330 <main+0x54>
	  }
	  for (int i = 0; i < 8; ++i) {
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	e00c      	b.n	8000372 <main+0x96>
		  offsetAngle(45, 1, 100);
 8000358:	2164      	movs	r1, #100	@ 0x64
 800035a:	2001      	movs	r0, #1
 800035c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80003b0 <main+0xd4>
 8000360:	f7ff ff78 	bl	8000254 <offsetAngle>
		  HAL_Delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000368:	f000 fc9e 	bl	8000ca8 <HAL_Delay>
	  for (int i = 0; i < 8; ++i) {
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	3301      	adds	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	2b07      	cmp	r3, #7
 8000376:	ddef      	ble.n	8000358 <main+0x7c>
	  }
	  for (int i = 0; i < 8; ++i) {
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	e00d      	b.n	800039a <main+0xbe>
		  offsetAngle(180, 0, 750);
 800037e:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8000382:	2000      	movs	r0, #0
 8000384:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80003b4 <main+0xd8>
 8000388:	f7ff ff64 	bl	8000254 <offsetAngle>
		  HAL_Delay(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000390:	f000 fc8a 	bl	8000ca8 <HAL_Delay>
	  for (int i = 0; i < 8; ++i) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b07      	cmp	r3, #7
 800039e:	ddee      	ble.n	800037e <main+0xa2>
	  HAL_Delay(10000);
 80003a0:	e7bf      	b.n	8000322 <main+0x46>
 80003a2:	bf00      	nop
 80003a4:	20040028 	.word	0x20040028
 80003a8:	48000800 	.word	0x48000800
 80003ac:	41b40000 	.word	0x41b40000
 80003b0:	42340000 	.word	0x42340000
 80003b4:	43340000 	.word	0x43340000

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	@ 0x58
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2244      	movs	r2, #68	@ 0x44
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 faac 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003de:	f000 ff37 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003e8:	f000 fad4 	bl	8000994 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ec:	2310      	movs	r3, #16
 80003ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003f8:	2360      	movs	r3, #96	@ 0x60
 80003fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4618      	mov	r0, r3
 8000406:	f000 ffd7 	bl	80013b8 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000410:	f000 fac0 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000428:	463b      	mov	r3, r7
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fbdd 	bl	8001bec <HAL_RCC_ClockConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000438:	f000 faac 	bl	8000994 <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3758      	adds	r7, #88	@ 0x58
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <MX_TIM4_Init+0x94>)
 8000464:	4a1d      	ldr	r2, [pc, #116]	@ (80004dc <MX_TIM4_Init+0x98>)
 8000466:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000468:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <MX_TIM4_Init+0x94>)
 800046a:	2203      	movs	r2, #3
 800046c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <MX_TIM4_Init+0x94>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <MX_TIM4_Init+0x94>)
 8000476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800047a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_TIM4_Init+0x94>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <MX_TIM4_Init+0x94>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000488:	4813      	ldr	r0, [pc, #76]	@ (80004d8 <MX_TIM4_Init+0x94>)
 800048a:	f001 fe35 	bl	80020f8 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000494:	f000 fa7e 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800049c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <MX_TIM4_Init+0x94>)
 80004a6:	f001 ff85 	bl	80023b4 <HAL_TIM_ConfigClockSource>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80004b0:	f000 fa70 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_TIM4_Init+0x94>)
 80004c2:	f002 f9a7 	bl	8002814 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 fa62 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20040028 	.word	0x20040028
 80004dc:	40000800 	.word	0x40000800

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08e      	sub	sp, #56	@ 0x38
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f6:	4bb4      	ldr	r3, [pc, #720]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	4ab3      	ldr	r2, [pc, #716]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 80004fc:	f043 0310 	orr.w	r3, r3, #16
 8000500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000502:	4bb1      	ldr	r3, [pc, #708]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	f003 0310 	and.w	r3, r3, #16
 800050a:	623b      	str	r3, [r7, #32]
 800050c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4bae      	ldr	r3, [pc, #696]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	4aad      	ldr	r2, [pc, #692]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051a:	4bab      	ldr	r3, [pc, #684]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	61fb      	str	r3, [r7, #28]
 8000524:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4ba8      	ldr	r3, [pc, #672]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4aa7      	ldr	r2, [pc, #668]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4ba5      	ldr	r3, [pc, #660]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	61bb      	str	r3, [r7, #24]
 800053c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	4ba2      	ldr	r3, [pc, #648]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4aa1      	ldr	r2, [pc, #644]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b9f      	ldr	r3, [pc, #636]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b9c      	ldr	r3, [pc, #624]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a9b      	ldr	r2, [pc, #620]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b99      	ldr	r3, [pc, #612]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b96      	ldr	r3, [pc, #600]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a95      	ldr	r2, [pc, #596]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b93      	ldr	r3, [pc, #588]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b90      	ldr	r3, [pc, #576]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a8f      	ldr	r2, [pc, #572]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b8d      	ldr	r3, [pc, #564]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800059e:	4b8a      	ldr	r3, [pc, #552]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a89      	ldr	r2, [pc, #548]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b87      	ldr	r3, [pc, #540]	@ (80007c8 <MX_GPIO_Init+0x2e8>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80005b6:	f000 feef 	bl	8001398 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	211b      	movs	r1, #27
 80005be:	4883      	ldr	r0, [pc, #524]	@ (80007cc <MX_GPIO_Init+0x2ec>)
 80005c0:	f000 fe0e 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f000 fe08 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005d0:	230c      	movs	r3, #12
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80005e0:	230d      	movs	r3, #13
 80005e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e8:	4619      	mov	r1, r3
 80005ea:	4879      	ldr	r0, [pc, #484]	@ (80007d0 <MX_GPIO_Init+0x2f0>)
 80005ec:	f000 fc66 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005f0:	2307      	movs	r3, #7
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f4:	2312      	movs	r3, #18
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000600:	2304      	movs	r3, #4
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000608:	4619      	mov	r1, r3
 800060a:	4872      	ldr	r0, [pc, #456]	@ (80007d4 <MX_GPIO_Init+0x2f4>)
 800060c:	f000 fc56 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000620:	230d      	movs	r3, #13
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000628:	4619      	mov	r1, r3
 800062a:	486a      	ldr	r0, [pc, #424]	@ (80007d4 <MX_GPIO_Init+0x2f4>)
 800062c:	f000 fc46 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000630:	231b      	movs	r3, #27
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000644:	4619      	mov	r1, r3
 8000646:	4861      	ldr	r0, [pc, #388]	@ (80007cc <MX_GPIO_Init+0x2ec>)
 8000648:	f000 fc38 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800064c:	2324      	movs	r3, #36	@ 0x24
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000650:	230b      	movs	r3, #11
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	485b      	ldr	r0, [pc, #364]	@ (80007cc <MX_GPIO_Init+0x2ec>)
 8000660:	f000 fc2c 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000664:	2301      	movs	r3, #1
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000674:	2301      	movs	r3, #1
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000682:	f000 fc1b 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000686:	2302      	movs	r3, #2
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800068a:	230b      	movs	r3, #11
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fc0e 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a0:	2308      	movs	r3, #8
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f000 fbff 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006be:	23f0      	movs	r3, #240	@ 0xf0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ce:	2305      	movs	r3, #5
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f000 fbee 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e0:	2301      	movs	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4837      	ldr	r0, [pc, #220]	@ (80007d8 <MX_GPIO_Init+0x2f8>)
 80006fc:	f000 fbde 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000700:	2302      	movs	r3, #2
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000704:	230b      	movs	r3, #11
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4831      	ldr	r0, [pc, #196]	@ (80007d8 <MX_GPIO_Init+0x2f8>)
 8000714:	f000 fbd2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000718:	2344      	movs	r3, #68	@ 0x44
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4619      	mov	r1, r3
 800072a:	482b      	ldr	r0, [pc, #172]	@ (80007d8 <MX_GPIO_Init+0x2f8>)
 800072c:	f000 fbc6 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000730:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000742:	2301      	movs	r3, #1
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <MX_GPIO_Init+0x2f0>)
 800074e:	f000 fbb5 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000752:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000764:	2303      	movs	r3, #3
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	4818      	ldr	r0, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x2f0>)
 8000770:	f000 fba4 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000786:	2301      	movs	r3, #1
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0x2f8>)
 8000792:	f000 fb93 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000796:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80007a8:	230d      	movs	r3, #13
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_GPIO_Init+0x2f8>)
 80007b4:	f000 fb82 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e00a      	b.n	80007dc <MX_GPIO_Init+0x2fc>
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48001000 	.word	0x48001000
 80007d4:	48001400 	.word	0x48001400
 80007d8:	48000400 	.word	0x48000400
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80007e2:	230e      	movs	r3, #14
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	4865      	ldr	r0, [pc, #404]	@ (8000984 <MX_GPIO_Init+0x4a4>)
 80007ee:	f000 fb65 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000804:	2307      	movs	r3, #7
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	485e      	ldr	r0, [pc, #376]	@ (8000988 <MX_GPIO_Init+0x4a8>)
 8000810:	f000 fb54 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000814:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000826:	2308      	movs	r3, #8
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	4856      	ldr	r0, [pc, #344]	@ (800098c <MX_GPIO_Init+0x4ac>)
 8000832:	f000 fb43 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000836:	2340      	movs	r3, #64	@ 0x40
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000846:	230d      	movs	r3, #13
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	484f      	ldr	r0, [pc, #316]	@ (8000990 <MX_GPIO_Init+0x4b0>)
 8000852:	f000 fb33 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4847      	ldr	r0, [pc, #284]	@ (8000990 <MX_GPIO_Init+0x4b0>)
 8000872:	f000 fb23 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000876:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000888:	230c      	movs	r3, #12
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	483f      	ldr	r0, [pc, #252]	@ (8000990 <MX_GPIO_Init+0x4b0>)
 8000894:	f000 fb12 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000898:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008aa:	230a      	movs	r3, #10
 80008ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f000 fb00 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f000 faf2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008e8:	2309      	movs	r3, #9
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4825      	ldr	r0, [pc, #148]	@ (8000988 <MX_GPIO_Init+0x4a8>)
 80008f4:	f000 fae2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f8:	2304      	movs	r3, #4
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000908:	230c      	movs	r3, #12
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	481d      	ldr	r0, [pc, #116]	@ (8000988 <MX_GPIO_Init+0x4a8>)
 8000914:	f000 fad2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000918:	2378      	movs	r3, #120	@ 0x78
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000928:	2307      	movs	r3, #7
 800092a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4815      	ldr	r0, [pc, #84]	@ (8000988 <MX_GPIO_Init+0x4a8>)
 8000934:	f000 fac2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000938:	2338      	movs	r3, #56	@ 0x38
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000948:	2306      	movs	r3, #6
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_GPIO_Init+0x4a4>)
 8000954:	f000 fab2 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000958:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096a:	2304      	movs	r3, #4
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4803      	ldr	r0, [pc, #12]	@ (8000984 <MX_GPIO_Init+0x4a4>)
 8000976:	f000 faa1 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3738      	adds	r7, #56	@ 0x38
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	48000400 	.word	0x48000400
 8000988:	48000c00 	.word	0x48000c00
 800098c:	48001800 	.word	0x48001800
 8000990:	48000800 	.word	0x48000800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a33      	ldr	r2, [pc, #204]	@ (8000ad4 <HAL_TIM_Base_MspInit+0xec>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d160      	bne.n	8000acc <HAL_TIM_Base_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a20      	ldr	r2, [pc, #128]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <HAL_TIM_Base_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PB7     ------> TIM4_CH2
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a6a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	@ (8000adc <HAL_TIM_Base_MspInit+0xf4>)
 8000a88:	f000 fa18 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <HAL_TIM_Base_MspInit+0xf8>)
 8000aa8:	f000 fa08 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8000ac8:	f000 f9f8 	bl	8000ebc <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40000800 	.word	0x40000800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000c00 	.word	0x48000c00
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48001000 	.word	0x48001000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 f893 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	@ (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f001 fecb 	bl	8002934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fb9d 	bl	80002dc <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ba8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000bac:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 8000bb0:	080029dc 	.word	0x080029dc
  ldr r2, =_sbss
 8000bb4:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 8000bb8:	20040078 	.word	0x20040078

08000bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f943 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f80e 	bl	8000bf0 <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fede 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d023      	beq.n	8000c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <HAL_InitTick+0x70>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f941 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10f      	bne.n	8000c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d809      	bhi.n	8000c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f919 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_InitTick+0x74>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e004      	b.n	8000c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e001      	b.n	8000c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20040008 	.word	0x20040008
 8000c60:	20040000 	.word	0x20040000
 8000c64:	20040004 	.word	0x20040004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20040008 	.word	0x20040008
 8000c8c:	20040074 	.word	0x20040074

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20040074 	.word	0x20040074

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20040008 	.word	0x20040008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff47 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff5c 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffb0 	bl	8000e10 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e166      	b.n	800119a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8158 	beq.w	8001194 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0203 	and.w	r2, r3, #3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80b2 	beq.w	8001194 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	4b61      	ldr	r3, [pc, #388]	@ (80011b8 <HAL_GPIO_Init+0x2fc>)
 8001032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001034:	4a60      	ldr	r2, [pc, #384]	@ (80011b8 <HAL_GPIO_Init+0x2fc>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6613      	str	r3, [r2, #96]	@ 0x60
 800103c:	4b5e      	ldr	r3, [pc, #376]	@ (80011b8 <HAL_GPIO_Init+0x2fc>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001048:	4a5c      	ldr	r2, [pc, #368]	@ (80011bc <HAL_GPIO_Init+0x300>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001072:	d02b      	beq.n	80010cc <HAL_GPIO_Init+0x210>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a52      	ldr	r2, [pc, #328]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d025      	beq.n	80010c8 <HAL_GPIO_Init+0x20c>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a51      	ldr	r2, [pc, #324]	@ (80011c4 <HAL_GPIO_Init+0x308>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d01f      	beq.n	80010c4 <HAL_GPIO_Init+0x208>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a50      	ldr	r2, [pc, #320]	@ (80011c8 <HAL_GPIO_Init+0x30c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_GPIO_Init+0x204>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4f      	ldr	r2, [pc, #316]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x200>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4e      	ldr	r2, [pc, #312]	@ (80011d0 <HAL_GPIO_Init+0x314>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1fc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4d      	ldr	r2, [pc, #308]	@ (80011d4 <HAL_GPIO_Init+0x318>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1f8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4c      	ldr	r2, [pc, #304]	@ (80011d8 <HAL_GPIO_Init+0x31c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1f4>
 80010ac:	2307      	movs	r3, #7
 80010ae:	e00e      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010b0:	2308      	movs	r3, #8
 80010b2:	e00c      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010b4:	2306      	movs	r3, #6
 80010b6:	e00a      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010b8:	2305      	movs	r3, #5
 80010ba:	e008      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010bc:	2304      	movs	r3, #4
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x212>
 80010cc:	2300      	movs	r3, #0
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010de:	4937      	ldr	r1, [pc, #220]	@ (80011bc <HAL_GPIO_Init+0x300>)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <HAL_GPIO_Init+0x320>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001110:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <HAL_GPIO_Init+0x320>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_GPIO_Init+0x320>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113a:	4a28      	ldr	r2, [pc, #160]	@ (80011dc <HAL_GPIO_Init+0x320>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_GPIO_Init+0x320>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001164:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_GPIO_Init+0x320>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <HAL_GPIO_Init+0x320>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <HAL_GPIO_Init+0x320>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f47f ae91 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48001400 	.word	0x48001400
 80011d4:	48001800 	.word	0x48001800
 80011d8:	48001c00 	.word	0x48001c00
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800121c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001220:	d102      	bne.n	8001228 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001226:	e00b      	b.n	8001240 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_PWREx_GetVoltageRange+0x3c>)
 800122a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001236:	d102      	bne.n	800123e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800123c:	e000      	b.n	8001240 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800123e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d141      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800125e:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126a:	d131      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800126c:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001272:	4a46      	ldr	r2, [pc, #280]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	4b43      	ldr	r3, [pc, #268]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001284:	4a41      	ldr	r2, [pc, #260]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2232      	movs	r2, #50	@ 0x32
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	4a3f      	ldr	r2, [pc, #252]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a2:	e002      	b.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b6:	d102      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f2      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ca:	d158      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e057      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012d6:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012e0:	e04d      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e8:	d141      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f6:	d131      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2232      	movs	r2, #50	@ 0x32
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	e002      	b.n	8001336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001342:	d102      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f2      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d112      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e011      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001368:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800136c:	e007      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800137c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40007000 	.word	0x40007000
 8001390:	20040000 	.word	0x20040000
 8001394:	431bde83 	.word	0x431bde83

08001398 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a6:	6053      	str	r3, [r2, #4]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 bc08 	b.w	8001bdc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013cc:	4b96      	ldr	r3, [pc, #600]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d6:	4b94      	ldr	r3, [pc, #592]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80e4 	beq.w	80015b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_RCC_OscConfig+0x4c>
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	f040 808b 	bne.w	8001512 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 8087 	bne.w	8001512 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001404:	4b88      	ldr	r3, [pc, #544]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x64>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e3df      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_RCC_OscConfig+0x7e>
 800142c:	4b7e      	ldr	r3, [pc, #504]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001434:	e005      	b.n	8001442 <HAL_RCC_OscConfig+0x8a>
 8001436:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001442:	4293      	cmp	r3, r2
 8001444:	d223      	bcs.n	800148e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd94 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e3c0      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145a:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a72      	ldr	r2, [pc, #456]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b70      	ldr	r3, [pc, #448]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	496d      	ldr	r1, [pc, #436]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001478:	4b6b      	ldr	r3, [pc, #428]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4968      	ldr	r1, [pc, #416]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e025      	b.n	80014da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a65      	ldr	r2, [pc, #404]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b63      	ldr	r3, [pc, #396]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4960      	ldr	r1, [pc, #384]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	495b      	ldr	r1, [pc, #364]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd54 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e380      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014da:	f000 fcc1 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b51      	ldr	r3, [pc, #324]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	4950      	ldr	r1, [pc, #320]	@ (800162c <HAL_RCC_OscConfig+0x274>)
 80014ec:	5ccb      	ldrb	r3, [r1, r3]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001630 <HAL_RCC_OscConfig+0x278>)
 80014f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb76 	bl	8000bf0 <HAL_InitTick>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d052      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e364      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d032      	beq.n	8001580 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800151a:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a42      	ldr	r2, [pc, #264]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001526:	f7ff fbb3 	bl	8000c90 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152e:	f7ff fbaf 	bl	8000c90 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e34d      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b36      	ldr	r3, [pc, #216]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a35      	ldr	r2, [pc, #212]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4930      	ldr	r1, [pc, #192]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	492b      	ldr	r1, [pc, #172]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
 800157e:	e01a      	b.n	80015b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a28      	ldr	r2, [pc, #160]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb80 	bl	8000c90 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fb7c 	bl	8000c90 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e31a      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1dc>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d073      	beq.n	80016aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x21c>
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d10e      	bne.n	80015ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d063      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d15f      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2f7      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x24c>
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e025      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160c:	d114      	bne.n	8001638 <HAL_RCC_OscConfig+0x280>
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a02      	ldr	r2, [pc, #8]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e013      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001628:	40021000 	.word	0x40021000
 800162c:	08002994 	.word	0x08002994
 8001630:	20040000 	.word	0x20040000
 8001634:	20040004 	.word	0x20040004
 8001638:	4ba0      	ldr	r3, [pc, #640]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9f      	ldr	r2, [pc, #636]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b9d      	ldr	r3, [pc, #628]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9c      	ldr	r2, [pc, #624]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb1a 	bl	8000c90 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb16 	bl	8000c90 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2b4      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	4b92      	ldr	r3, [pc, #584]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2a8>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb06 	bl	8000c90 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fb02 	bl	8000c90 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e2a0      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169a:	4b88      	ldr	r3, [pc, #544]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d0>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d060      	beq.n	8001778 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x310>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	4b7c      	ldr	r3, [pc, #496]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x328>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e27d      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b76      	ldr	r3, [pc, #472]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	4973      	ldr	r1, [pc, #460]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	e040      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d023      	beq.n	8001746 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fac1 	bl	8000c90 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fabd 	bl	8000c90 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e25b      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	495f      	ldr	r1, [pc, #380]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b5d      	ldr	r3, [pc, #372]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5c      	ldr	r2, [pc, #368]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fa9d 	bl	8000c90 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fa99 	bl	8000c90 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e237      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d03c      	beq.n	80017fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	4a4a      	ldr	r2, [pc, #296]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fa78 	bl	8000c90 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fa74 	bl	8000c90 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e212      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3ec>
 80017c4:	e01b      	b.n	80017fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017cc:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa5b 	bl	8000c90 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fa57 	bl	8000c90 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1f5      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001834:	2301      	movs	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d118      	bne.n	8001876 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001850:	f7ff fa1e 	bl	8000c90 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fa1a 	bl	8000c90 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1b8      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d8>
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800188e:	e029      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d115      	bne.n	80018c4 <HAL_RCC_OscConfig+0x50c>
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189e:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ae:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	4b9d      	ldr	r3, [pc, #628]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ca:	4a9c      	ldr	r2, [pc, #624]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d4:	4b99      	ldr	r3, [pc, #612]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff f9d0 	bl	8000c90 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff f9cc 	bl	8000c90 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e168      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x53c>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f9b9 	bl	8000c90 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff f9b5 	bl	8000c90 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e151      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b80      	ldr	r3, [pc, #512]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a7a      	ldr	r2, [pc, #488]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196c:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 800196e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001972:	4a72      	ldr	r2, [pc, #456]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f988 	bl	8000c90 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001984:	f7ff f984 	bl	8000c90 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e122      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001996:	4b69      	ldr	r3, [pc, #420]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x5cc>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a6:	4b65      	ldr	r3, [pc, #404]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ac:	4a63      	ldr	r2, [pc, #396]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f96b 	bl	8000c90 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019be:	f7ff f967 	bl	8000c90 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e105      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80f9 	beq.w	8001bda <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 80cf 	bne.w	8001b90 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019f2:	4b52      	ldr	r3, [pc, #328]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0203 	and.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d12c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	3b01      	subs	r3, #1
 8001a12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d123      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d11b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d113      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d109      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d071      	beq.n	8001b44 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d068      	beq.n	8001b38 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a66:	4b35      	ldr	r3, [pc, #212]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a72:	4b32      	ldr	r3, [pc, #200]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0ac      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a2d      	ldr	r2, [pc, #180]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8e:	f7ff f8ff 	bl	8000c90 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f8fb 	bl	8000c90 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e099      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_RCC_OscConfig+0x788>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ad6:	0852      	lsrs	r2, r2, #1
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0652      	lsls	r2, r2, #25
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aee:	06d2      	lsls	r2, r2, #27
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4912      	ldr	r1, [pc, #72]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff f8be 	bl	8000c90 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d144      	bne.n	8001bda <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b68:	f7ff f892 	bl	8000c90 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f88e 	bl	8000c90 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e02c      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x7b8>
 8001b8e:	e024      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d01f      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f875 	bl	8000c90 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f871 	bl	8000c90 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x830>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e11d      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b90      	ldr	r3, [pc, #576]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b8d      	ldr	r3, [pc, #564]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	498b      	ldr	r1, [pc, #556]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b89      	ldr	r3, [pc, #548]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e105      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b81      	ldr	r3, [pc, #516]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d908      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b7e      	ldr	r3, [pc, #504]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	497b      	ldr	r1, [pc, #492]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d079      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d11e      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b75      	ldr	r3, [pc, #468]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0dc      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c86:	f000 f9d1 	bl	800202c <RCC_GetSysClockFreqFromPLLSource>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a70      	ldr	r2, [pc, #448]	@ (8001e50 <HAL_RCC_ClockConfig+0x264>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d946      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c92:	4b6e      	ldr	r3, [pc, #440]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d140      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e035      	b.n	8001d20 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbc:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b9      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0ad      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0a5      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cf4:	f000 f8b4 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a55      	ldr	r2, [pc, #340]	@ (8001e50 <HAL_RCC_ClockConfig+0x264>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d90f      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d00:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d20:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 0203 	bic.w	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4947      	ldr	r1, [pc, #284]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d32:	f7fe ffad 	bl	8000c90 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3a:	f7fe ffa9 	bl	8000c90 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e077      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d50:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 020c 	and.w	r2, r3, #12
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d1eb      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b80      	cmp	r3, #128	@ 0x80
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a37      	ldr	r2, [pc, #220]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d72:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	492b      	ldr	r1, [pc, #172]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d210      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 020f 	bic.w	r2, r3, #15
 8001db8:	4923      	ldr	r1, [pc, #140]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4918      	ldr	r1, [pc, #96]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4910      	ldr	r1, [pc, #64]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e10:	f000 f826 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <HAL_RCC_ClockConfig+0x268>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x26c>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fedb 	bl	8000bf0 <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	04c4b400 	.word	0x04c4b400
 8001e54:	08002994 	.word	0x08002994
 8001e58:	20040000 	.word	0x20040000
 8001e5c:	20040004 	.word	0x20040004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d121      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11e      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e94:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e004      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d134      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xac>
 8001f04:	e005      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f08:	617b      	str	r3, [r7, #20]
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0e:	617b      	str	r3, [r7, #20]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	617b      	str	r3, [r7, #20]
      break;
 8001f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0e5b      	lsrs	r3, r3, #25
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f58:	69bb      	ldr	r3, [r7, #24]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	080029a4 	.word	0x080029a4
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f93e 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
 8001f96:	e014      	b.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f92e 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d10b      	bne.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d913      	bls.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fd4:	d902      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e00d      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e00a      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fe6:	d902      	bls.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e004      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b70      	cmp	r3, #112	@ 0x70
 8001ff2:	d101      	bne.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 020f 	bic.w	r2, r3, #15
 8002000:	4909      	ldr	r1, [pc, #36]	@ (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002008:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40022000 	.word	0x40022000

0800202c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d00b      	beq.n	800205a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d825      	bhi.n	8002094 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d008      	beq.n	8002060 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d11f      	bne.n	8002094 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002056:	613b      	str	r3, [r7, #16]
    break;
 8002058:	e01f      	b.n	800209a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800205a:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800205c:	613b      	str	r3, [r7, #16]
    break;
 800205e:	e01c      	b.n	800209a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e005      	b.n	8002088 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
    break;
 8002092:	e002      	b.n	800209a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
    break;
 8002098:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209a:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	3301      	adds	r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fb03 f202 	mul.w	r2, r3, r2
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0e5b      	lsrs	r3, r3, #25
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020da:	683b      	ldr	r3, [r7, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	080029a4 	.word	0x080029a4

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e049      	b.n	800219e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fc62 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 fa06 	bl	8002548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_TIM_PWM_Start+0x24>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e03c      	b.n	8002246 <HAL_TIM_PWM_Start+0x9e>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d109      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x3e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e02f      	b.n	8002246 <HAL_TIM_PWM_Start+0x9e>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d109      	bne.n	8002200 <HAL_TIM_PWM_Start+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e022      	b.n	8002246 <HAL_TIM_PWM_Start+0x9e>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d109      	bne.n	800221a <HAL_TIM_PWM_Start+0x72>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	e015      	b.n	8002246 <HAL_TIM_PWM_Start+0x9e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b10      	cmp	r3, #16
 800221e:	d109      	bne.n	8002234 <HAL_TIM_PWM_Start+0x8c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	bf14      	ite	ne
 800222c:	2301      	movne	r3, #1
 800222e:	2300      	moveq	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e008      	b.n	8002246 <HAL_TIM_PWM_Start+0x9e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e09c      	b.n	8002388 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Start+0xb6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800225c:	e023      	b.n	80022a6 <HAL_TIM_PWM_Start+0xfe>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Start+0xc6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800226c:	e01b      	b.n	80022a6 <HAL_TIM_PWM_Start+0xfe>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d104      	bne.n	800227e <HAL_TIM_PWM_Start+0xd6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800227c:	e013      	b.n	80022a6 <HAL_TIM_PWM_Start+0xfe>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d104      	bne.n	800228e <HAL_TIM_PWM_Start+0xe6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800228c:	e00b      	b.n	80022a6 <HAL_TIM_PWM_Start+0xfe>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b10      	cmp	r3, #16
 8002292:	d104      	bne.n	800229e <HAL_TIM_PWM_Start+0xf6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800229c:	e003      	b.n	80022a6 <HAL_TIM_PWM_Start+0xfe>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fa8a 	bl	80027c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a35      	ldr	r2, [pc, #212]	@ (8002390 <HAL_TIM_PWM_Start+0x1e8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x13e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a34      	ldr	r2, [pc, #208]	@ (8002394 <HAL_TIM_PWM_Start+0x1ec>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00e      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x13e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a32      	ldr	r2, [pc, #200]	@ (8002398 <HAL_TIM_PWM_Start+0x1f0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x13e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a31      	ldr	r2, [pc, #196]	@ (800239c <HAL_TIM_PWM_Start+0x1f4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x13e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2f      	ldr	r2, [pc, #188]	@ (80023a0 <HAL_TIM_PWM_Start+0x1f8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_PWM_Start+0x142>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_TIM_PWM_Start+0x144>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <HAL_TIM_PWM_Start+0x1e8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002312:	d018      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <HAL_TIM_PWM_Start+0x1fc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <HAL_TIM_PWM_Start+0x200>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_TIM_PWM_Start+0x204>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <HAL_TIM_PWM_Start+0x1ec>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_TIM_PWM_Start+0x19e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <HAL_TIM_PWM_Start+0x1f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d115      	bne.n	8002372 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_TIM_PWM_Start+0x208>)
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b06      	cmp	r3, #6
 8002356:	d015      	beq.n	8002384 <HAL_TIM_PWM_Start+0x1dc>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235e:	d011      	beq.n	8002384 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	e008      	b.n	8002384 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40013400 	.word	0x40013400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40000c00 	.word	0x40000c00
 80023b0:	00010007 	.word	0x00010007

080023b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x1c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0b6      	b.n	800253e <HAL_TIM_ConfigClockSource+0x18a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800240c:	d03e      	beq.n	800248c <HAL_TIM_ConfigClockSource+0xd8>
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002412:	f200 8087 	bhi.w	8002524 <HAL_TIM_ConfigClockSource+0x170>
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800241a:	f000 8086 	beq.w	800252a <HAL_TIM_ConfigClockSource+0x176>
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002422:	d87f      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 8002424:	2b70      	cmp	r3, #112	@ 0x70
 8002426:	d01a      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xaa>
 8002428:	2b70      	cmp	r3, #112	@ 0x70
 800242a:	d87b      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 800242c:	2b60      	cmp	r3, #96	@ 0x60
 800242e:	d050      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x11e>
 8002430:	2b60      	cmp	r3, #96	@ 0x60
 8002432:	d877      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 8002434:	2b50      	cmp	r3, #80	@ 0x50
 8002436:	d03c      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xfe>
 8002438:	2b50      	cmp	r3, #80	@ 0x50
 800243a:	d873      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 800243c:	2b40      	cmp	r3, #64	@ 0x40
 800243e:	d058      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0x13e>
 8002440:	2b40      	cmp	r3, #64	@ 0x40
 8002442:	d86f      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 8002444:	2b30      	cmp	r3, #48	@ 0x30
 8002446:	d064      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x15e>
 8002448:	2b30      	cmp	r3, #48	@ 0x30
 800244a:	d86b      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 800244c:	2b20      	cmp	r3, #32
 800244e:	d060      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x15e>
 8002450:	2b20      	cmp	r3, #32
 8002452:	d867      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05c      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x15e>
 8002458:	2b10      	cmp	r3, #16
 800245a:	d05a      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x15e>
 800245c:	e062      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800246e:	f000 f98b 	bl	8002788 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	609a      	str	r2, [r3, #8]
      break;
 800248a:	e04f      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800249c:	f000 f974 	bl	8002788 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ae:	609a      	str	r2, [r3, #8]
      break;
 80024b0:	e03c      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024be:	461a      	mov	r2, r3
 80024c0:	f000 f8e8 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2150      	movs	r1, #80	@ 0x50
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f941 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80024d0:	e02c      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024de:	461a      	mov	r2, r3
 80024e0:	f000 f907 	bl	80026f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2160      	movs	r1, #96	@ 0x60
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f931 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80024f0:	e01c      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 f8c8 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f921 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 8002510:	e00c      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f000 f918 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 8002522:	e003      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e000      	b.n	800252c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800252a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a46      	ldr	r2, [pc, #280]	@ (8002674 <TIM_Base_SetConfig+0x12c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d00f      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a43      	ldr	r2, [pc, #268]	@ (8002678 <TIM_Base_SetConfig+0x130>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00b      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a42      	ldr	r2, [pc, #264]	@ (800267c <TIM_Base_SetConfig+0x134>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a41      	ldr	r2, [pc, #260]	@ (8002680 <TIM_Base_SetConfig+0x138>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d003      	beq.n	8002588 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <TIM_Base_SetConfig+0x13c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d108      	bne.n	800259a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a35      	ldr	r2, [pc, #212]	@ (8002674 <TIM_Base_SetConfig+0x12c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a8:	d01b      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a32      	ldr	r2, [pc, #200]	@ (8002678 <TIM_Base_SetConfig+0x130>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d017      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a31      	ldr	r2, [pc, #196]	@ (800267c <TIM_Base_SetConfig+0x134>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a30      	ldr	r2, [pc, #192]	@ (8002680 <TIM_Base_SetConfig+0x138>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00f      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <TIM_Base_SetConfig+0x13c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00b      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002688 <TIM_Base_SetConfig+0x140>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <TIM_Base_SetConfig+0x144>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d003      	beq.n	80025e2 <TIM_Base_SetConfig+0x9a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <TIM_Base_SetConfig+0x148>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d108      	bne.n	80025f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <TIM_Base_SetConfig+0x12c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00f      	beq.n	8002640 <TIM_Base_SetConfig+0xf8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <TIM_Base_SetConfig+0x13c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0xf8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <TIM_Base_SetConfig+0x140>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0xf8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a16      	ldr	r2, [pc, #88]	@ (800268c <TIM_Base_SetConfig+0x144>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0xf8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <TIM_Base_SetConfig+0x148>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f023 0201 	bic.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
  }
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400
 800267c:	40000800 	.word	0x40000800
 8002680:	40000c00 	.word	0x40000c00
 8002684:	40013400 	.word	0x40013400
 8002688:	40014000 	.word	0x40014000
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800

08002694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 030a 	bic.w	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b087      	sub	sp, #28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f023 0210 	bic.w	r2, r3, #16
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800271c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	031b      	lsls	r3, r3, #12
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800272e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	f043 0307 	orr.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2201      	movs	r2, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002828:	2302      	movs	r3, #2
 800282a:	e068      	b.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2e      	ldr	r2, [pc, #184]	@ (800290c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01d      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289e:	d018      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a13      	ldr	r2, [pc, #76]	@ (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10c      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40013400 	.word	0x40013400
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40014000 	.word	0x40014000

08002924 <memset>:
 8002924:	4402      	add	r2, r0
 8002926:	4603      	mov	r3, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <__libc_init_array>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	4d0d      	ldr	r5, [pc, #52]	@ (800296c <__libc_init_array+0x38>)
 8002938:	4c0d      	ldr	r4, [pc, #52]	@ (8002970 <__libc_init_array+0x3c>)
 800293a:	1b64      	subs	r4, r4, r5
 800293c:	10a4      	asrs	r4, r4, #2
 800293e:	2600      	movs	r6, #0
 8002940:	42a6      	cmp	r6, r4
 8002942:	d109      	bne.n	8002958 <__libc_init_array+0x24>
 8002944:	4d0b      	ldr	r5, [pc, #44]	@ (8002974 <__libc_init_array+0x40>)
 8002946:	4c0c      	ldr	r4, [pc, #48]	@ (8002978 <__libc_init_array+0x44>)
 8002948:	f000 f818 	bl	800297c <_init>
 800294c:	1b64      	subs	r4, r4, r5
 800294e:	10a4      	asrs	r4, r4, #2
 8002950:	2600      	movs	r6, #0
 8002952:	42a6      	cmp	r6, r4
 8002954:	d105      	bne.n	8002962 <__libc_init_array+0x2e>
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	f855 3b04 	ldr.w	r3, [r5], #4
 800295c:	4798      	blx	r3
 800295e:	3601      	adds	r6, #1
 8002960:	e7ee      	b.n	8002940 <__libc_init_array+0xc>
 8002962:	f855 3b04 	ldr.w	r3, [r5], #4
 8002966:	4798      	blx	r3
 8002968:	3601      	adds	r6, #1
 800296a:	e7f2      	b.n	8002952 <__libc_init_array+0x1e>
 800296c:	080029d4 	.word	0x080029d4
 8002970:	080029d4 	.word	0x080029d4
 8002974:	080029d4 	.word	0x080029d4
 8002978:	080029d8 	.word	0x080029d8

0800297c <_init>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr

08002988 <_fini>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr
